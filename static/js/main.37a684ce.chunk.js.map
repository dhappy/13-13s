{"version":3,"sources":["Lists.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useImmer","groups","axes","setAxes","dynAxes","setDynAxes","useState","dragStart","setDragStart","dragOver","setDragOver","sortOn","setSortOn","sortAsc","setSortAsc","colors","colorList","details","realms","projects","months","src","SortOn","column","props","sort","seen","orig","sorted","Object","keys","reverse","idxs","map","entry","idx","indexOf","undefined","entries","forEach","type","align","title","opacity","onClick","m","p","cursor","lineHeight","useEffect","x","values","hold","y","isolation","templateColumns","length","MaybeTooltip","label","children","includes","display","gridColumn","gridRow","mx","mb","fontSize","textAlign","textTransform","iidx","mixBlendMode","px","py","whiteSpace","mt","draggable","bg","toLowerCase","onDragStart","onDragEnd","onDragEnter","onDragLeave","json","Blob","JSON","stringify","window","open","URL","createObjectURL","justify","Lists","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.37a684ce.chunk.js","sourcesContent":["import { ReactElement, useEffect, useState } from 'react'\nimport {\n  Box, Button, Grid, GridItem, Heading, Stack,\n  StackProps, Tooltip,\n} from '@chakra-ui/react'\nimport { useImmer } from 'use-immer'\nimport groups from './groups.json'\nimport colorList from './colors.json'\nimport realms from './realms.json'\nimport projects from './projects.json'\nimport months from './months.json'\n\ninterface Point {\n  x: number\n  y: number\n}\n\ninterface TooltipProps {\n  label: string\n  children: ReactElement | ReactElement[] | string\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const [axes, setAxes] = (\n    useImmer<Record<string, string[]>>(groups)\n  )\n  const [dynAxes, setDynAxes] = (\n    useImmer<Record<string, string[]>>(axes)\n  )\n  const [dragStart, setDragStart] = (\n    useState<Point | null>(null)\n  )\n  const [dragOver, setDragOver] = (\n    useState<Point | null>(null)\n  )\n  const [sortOn, setSortOn] = useState('months')\n  const [sortAsc, setSortAsc] = useState(false)\n  const colors = colorList as Record<string, string>\n  const details: Record<string, Record<string, string>> = {\n    realms, projects, months,\n  }\n  const src = dragStart ? dynAxes : axes\n\n  const download = () => {\n    const json = new Blob(\n      [JSON.stringify(axes, null, 2)],\n      { type: 'application/json' }\n    )\n    window.open(URL.createObjectURL(json))\n  }\n\n  const SortOn = ({ column, ...props }: StackProps & { column: string }) => {\n    const sort = (sortAsc = true) => {\n      setSortAsc(sortAsc)\n      setSortOn(column)\n      setDynAxes((axes) => {\n        const seen: Record<string, number> = {}\n        const orig = [...axes[column]]\n        let sorted = [...axes[column]].sort()\n        if(column === 'months') {\n          sorted = Object.keys(months) // unicode sort order misplaces ⛎\n        }\n        if(sortAsc) {\n          sorted = sorted.reverse()\n        }\n        const idxs = sorted.map((entry) => {\n          const idx = orig.indexOf(\n            entry, seen[entry] === undefined ? 0 : seen[entry] + 1\n          )\n          return seen[entry] = idx\n        })\n        Object.entries(axes).forEach(([type, entries]) => {\n          axes[type] = idxs.map((idx) => entries[idx])\n        })\n      })\n    }\n    return (\n      <Stack align=\"center\" {...props}>\n        <Box\n          title={`Sort on ${column} ascending`}\n          opacity={sortOn === column && sortAsc ? 1 : 0.5}\n          onClick={() => sort(true)}\n          m={0} p={0} cursor=\"n-resize\"\n          lineHeight={0.75}\n        >▴</Box>\n        <Box\n          title={`Sort on ${column} descending`}\n          opacity={sortOn === column && !sortAsc ? 1 : 0.5}\n          onClick={() => sort(false)}\n          m=\"0 !important\" p={0} cursor=\"s-resize\"\n          lineHeight={0.75}\n        >▾</Box>\n      </Stack>\n    )\n  }\n\n  useEffect(() => {\n    if(!dragStart) {\n      setAxes(dynAxes)\n    } else if(dragStart.x === dragOver?.x) {\n      setDynAxes((dynAxes) => {\n        const orig = [...Object.values(axes)[dragStart.x - 1]]\n        const hold = orig[dragStart.y - 1]\n        orig[dragStart.y - 1] = orig[dragOver.y - 1]\n        orig[dragOver.y - 1] = hold\n        dynAxes[Object.keys(dynAxes)[dragStart.x - 1]] = orig\n      })\n    }\n  }, [dragStart, dragOver, axes, dynAxes, setAxes, setDynAxes])\n\n  return <Stack>\n    <Grid\n      isolation=\"isolate\"\n      templateColumns={`repeat(${Object.keys(axes).length}, 0fr)`}\n    >\n      {Object.entries(src).map(([type, entries], idx) => {\n        let MaybeTooltip = ({ label = '', children }: TooltipProps) => (\n          <>{children}</>\n        )\n        if(Object.keys(details).includes(type)) {\n          MaybeTooltip = ({ label, children }: TooltipProps) => (\n            <Tooltip {...{ label }}>{children}</Tooltip>\n          )\n        }\n\n        return (\n          <Stack key={idx} display=\"contents\">\n            <GridItem gridColumn={idx + 1} gridRow={1}>\n              <Heading\n                mx={2} mb={0} fontSize={20} textAlign=\"center\"\n                textTransform=\"capitalize\"\n              >\n                {type}\n              </Heading>\n              <SortOn column={type} m=\"0 !important\"/>\n            </GridItem>\n            {entries.map((entry, iidx) => (\n              <GridItem\n                mixBlendMode=\"color\"\n                key={`${idx}:${iidx}`}\n                px={5} py={1} whiteSpace=\"pre\" mt=\"0 !important\"\n                gridColumn={idx + 1} gridRow={iidx + 2}\n                draggable={true}\n                bg={colors[src.colors[iidx].toLowerCase()]}\n                onDragStart={() => setDragStart({\n                  x: idx + 1, y: iidx + 1,\n                })}\n                onDragEnd={() => setDragStart(null)}\n                onDragEnter={() => setDragOver({\n                  x: idx + 1, y: iidx + 1,\n                })}\n                onDragLeave={() => setDragOver(null)}\n              >\n                <MaybeTooltip label={details[type]?.[entry.toLowerCase()]}>\n                  {entry}\n                </MaybeTooltip>\n              </GridItem>\n            ))}\n          </Stack>\n        )\n      })}\n    </Grid>\n    <Button onClick={download} title=\"Download\">↯</Button>\n  </Stack>\n}\n","import { ChakraProvider, Flex } from '@chakra-ui/react'\nimport Lists from './Lists'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => (\n  <ChakraProvider>\n    <Flex justify=\"center\">\n      <Lists/>\n    </Flex>\n  </ChakraProvider>\n)","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}